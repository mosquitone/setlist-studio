generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String         @id @default(cuid())
  email                    String         @unique
  username                 String
  password                 String
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  emailChangeExpires       DateTime?
  emailChangeToken         String?
  emailVerificationExpires DateTime?
  emailVerificationToken   String?
  emailVerified            Boolean        @default(false)
  passwordResetExpires     DateTime?
  passwordResetToken       String?
  pendingEmail             String?
  authProvider             String         @default("email")
  pendingPassword          String?
  emailHistories           EmailHistory[]
  setlists                 Setlist[]
  songs                    Song[]

  @@map("users")
}

model Song {
  id        String   @id @default(cuid())
  title     String
  artist    String?
  duration  Int?
  key       String?
  tempo     Int?
  notes     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("songs")
}

model Setlist {
  id         String        @id @default(cuid())
  title      String
  eventName  String?
  eventDate  DateTime?
  openTime   String?
  startTime  String?
  theme      String?
  isPublic   Boolean       @default(false)
  userId     String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  artistName String?
  items      SetlistItem[]
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("setlists")
}

model SetlistItem {
  id        String  @id @default(cuid())
  title     String
  note      String?
  order     Int
  setlistId String
  setlist   Setlist @relation(fields: [setlistId], references: [id], onDelete: Cascade)

  @@unique([setlistId, order])
  @@map("setlist_items")
}

model RateLimitEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(1)
  resetTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([resetTime])
  @@map("rate_limit_entries")
}

model SecurityEvent {
  id        String   @id @default(cuid())
  type      String
  severity  String
  timestamp DateTime @default(now())
  userId    String?
  ipAddress String?
  userAgent String?
  resource  String?
  details   Json?

  @@index([timestamp])
  @@index([ipAddress])
  @@index([type])
  @@index([severity])
  @@map("security_events")
}

model ThreatActivity {
  id           String   @id @default(cuid())
  ipAddress    String
  activityType String
  userId       String?
  userAgent    String?
  timestamp    DateTime @default(now())
  metadata     Json?

  @@index([ipAddress, timestamp])
  @@index([activityType])
  @@index([timestamp])
  @@map("threat_activities")
}

model AuditLog {
  id        String   @id @default(cuid())
  eventType String
  outcome   String
  timestamp DateTime @default(now())
  userId    String?
  ipAddress String?
  userAgent String?
  riskLevel String
  details   Json?

  @@index([timestamp])
  @@index([eventType])
  @@index([riskLevel])
  @@index([userId])
  @@index([ipAddress])
  @@map("audit_logs")
}

model EmailHistory {
  id               String    @id @default(cuid())
  userId           String
  oldEmail         String
  newEmail         String
  changeMethod     String
  changedAt        DateTime  @default(now())
  ipAddress        String?
  userAgent        String?
  authProvider     String?
  lastUsedAt       DateTime?
  verificationSent Boolean   @default(false)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([oldEmail])
  @@index([newEmail])
  @@index([changedAt])
  @@map("email_histories")
}
